gc()
library(tidyverse)
cwd()
setwd("E:\Dashboard PQ")
setwd("E:/Dashboard PQ")
data <- read.csv("E:/Dashboard PQ/data_tratado.csv")
view(data)
install.packages("vcd")
library(vcd)
columns(data)
cols(data)
colnames(data)
contigencytable <- xtabs(~ octs6[SQ001] + CE06, data = data)
contigencytable <- xtabs(~ 'octs6[SQ001]' + CE06, data = data)
help(xtabs)
contigencytable <- xtabs(~ octs6[SQ001] + CE06, data = data)
names(data)
contigencytable <- xtabs(~ "octs6.SQ001." + CE06, data = data)
colnames(data)
contigencytable <- xtabs(~ `octs6.SQ001.` + CE06, data = data)
print(contigencytable)
help("mosaic")
mosaic(contigencytable)
# Identificar colunas que começam com "CE" e "octs6"
ce_cols <- grep("^CE", names(data), value = TRUE)
octs6_cols <- grep("^octs6", names(data), value = TRUE)
# Criar uma matriz para armazenar os valores de p
p_value_table <- matrix(NA, nrow = length(ce_cols), ncol = length(octs6_cols))
rownames(p_value_table) <- ce_cols
colnames(p_value_table) <- octs6_cols
# Realizar o teste de qui-quadrado para cada combinação
for (ce_col in ce_cols) {
for (octs6_col in octs6_cols) {
# Criar a tabela de contingência
contingency_table <- table(data[[ce_col]], data[[octs6_col]])
# Realizar o teste de qui-quadrado
test_result <- chisq.test(contingency_table)
# Armazenar o valor de p na matriz
p_value_table[ce_col, octs6_col] <- test_result$p.value
}
}
# Exibir a tabela de valores de p
print(p_value_table)
View(p_value_table)
# Criar uma matriz para armazenar os valores de p
p_value_table <- matrix(NA, nrow = length(ce_cols), ncol = length(octs6_cols))
rownames(p_value_table) <- ce_cols
colnames(p_value_table) <- octs6_cols
# Realizar o teste de qui-quadrado para cada combinação
for (ce_col in ce_cols) {
for (octs6_col in octs6_cols) {
# Criar a tabela de contingência
contingency_table <- table(as.factor(data[[ce_col]]), as.factor(data[[octs6_col]]))
# Realizar o teste de qui-quadrado
test_result <- chisq.test(contingency_table)
# Armazenar o valor de p na matriz
p_value_table[ce_col, octs6_col] <- test_result$p.value
}
}
# Exibir a tabela de valores de p
print(p_value_table)
# Exibir a tabela de valores de p com destaque para p < 0.5
p_value_table_highlighted <- ifelse(p_value_table < 0.5, paste0(p_value_table, "*"), p_value_table)
# Exibir a tabela com valores destacados
print(p_value_table_highlighted)
# Desativar notação científica
options(scipen = 999)
# Exibir a tabela de valores de p sem notação científica
print(format(p_value_table, scientific = FALSE))
# Exibir a tabela de valores de p sem notação científica
print(format(round(p_value_table, 5), scientific = FALSE))
# Loop para plotar gráficos de mosaico para cada combinação de CE e octs6
for (ce_col in ce_cols) {
for (octs6_col in octs6_cols) {
# Criar a tabela de contingência
contingency_table <- table(data[[ce_col]], data[[octs6_col]])
# Plotar o gráfico de mosaico
mosaic(contingency_table, shade = TRUE, legend = TRUE,
main = paste("Mosaic plot:", ce_col, "vs", octs6_col))
}
}
# Loop para plotar gráficos de mosaico para cada combinação de CE e octs6
for (octs6_col in octs6_cols) {
for (ce_col in ce_cols) {
# Criar a tabela de contingência
contingency_table <- table(data[[ce_col]], data[[octs6_col]])
# Plotar o gráfico de mosaico
mosaic(contingency_table, shade = TRUE, legend = TRUE,
main = paste("Mosaic plot:", ce_col, "vs", octs6_col))
}
}
help("table")
# Loop para plotar gráficos de mosaico para cada combinação de CE e octs6
for (octs6_col in octs6_cols) {
for (ce_col in ce_cols) {
# Criar a tabela de contingência
contingency_table <- table(data[[ce_col]], data[[octs6_col]], useNA = "no")
# Plotar o gráfico de mosaico
mosaic(contingency_table, shade = TRUE, legend = TRUE,
main = paste("Mosaic plot:", ce_col, "vs", octs6_col))
}
}
summary(data)
# Loop para plotar gráficos de mosaico para cada combinação de CE e octs6
for (octs6_col in octs6_cols) {
for (ce_col in ce_cols) {
# Transformar ambas colunas em categorica
data[[ce_col]] <- as.factor(data[[ce_col]])
data[[octs6_col]] <- as.factor(data[[octs6_col]])
# Criar a tabela de contingência
contingency_table <- table(data[[ce_col]], data[[octs6_col]], useNA = "no")
# Plotar o gráfico de mosaico
mosaic(contingency_table, shade = TRUE, legend = TRUE,
main = paste("Mosaic plot:", ce_col, "vs", octs6_col))
}
}
}
# Loop para plotar gráficos de mosaico para cada combinação de CE e octs6
for (octs6_col in octs6_cols) {
for (ce_col in ce_cols) {
# Transformar ambas colunas em categorica
data[[ce_col]] <- as.factor(data[[ce_col]])
data[[octs6_col]] <- as.factor(data[[octs6_col]])
}
}
summary(data)
# Loop para plotar gráficos de mosaico para cada combinação de CE e octs6
for (octs6_col in octs6_cols) {
for (ce_col in ce_cols) {
# Criar a tabela de contingência
contingency_table <- table(data[[ce_col]], data[[octs6_col]], useNA = "no")
# Plotar o gráfico de mosaico
mosaic(contingency_table, shade = TRUE, legend = TRUE,
main = paste("Mosaic plot:", ce_col, "vs", octs6_col))
}
}
# Loop para gerar gráficos de mosaico para cada combinação de CE e octs6
for (octs6_col in octs6_cols) {
for (ce_col in ce_cols) {
# Verificar se há pelo menos duas categorias em cada dimensão
if (length(unique(data[[ce_col]])) > 1 && length(unique(data[[octs6_col]])) > 1) {
# Criar a tabela de contingência, ignorando valores ausentes
contingency_table <- table(data[[ce_col]], data[[octs6_col]], useNA = "no")
# Verificar se a tabela de contingência não está vazia
if (sum(contingency_table) > 0) {
# Plotar o gráfico de mosaico
mosaic(contingency_table, shade = TRUE, legend = TRUE,
main = paste("Mosaic plot:", ce_col, "vs", octs6_col))
} else {
warning(paste("Tabela de contingência vazia para:", ce_col, "vs", octs6_col))
}
} else {
warning(paste("Uma das colunas tem apenas uma categoria:", ce_col, "ou", octs6_col))
}
}
}
# Loop para gerar gráficos de mosaico para cada combinação de CE e octs6
for (octs6_col in octs6_cols) {
for (ce_col in ce_cols) {
# Verificar se há pelo menos duas categorias em cada dimensão
if (length(unique(data[[ce_col]])) > 1 && length(unique(data[[octs6_col]])) > 1) {
# Criar a tabela de contingência, ignorando valores ausentes
contingency_table <- table(data[[ce_col]], data[[octs6_col]], useNA = "no")
# Verificar se a tabela de contingência tem pelo menos 2 linhas e 2 colunas
if (nrow(contingency_table) > 1 && ncol(contingency_table) > 1) {
# Plotar o gráfico de mosaico
mosaic(contingency_table, shade = TRUE, legend = TRUE,
main = paste("Mosaic plot:", ce_col, "vs", octs6_col))
} else {
warning(paste("Tabela de contingência inválida para:", ce_col, "vs", octs6_col))
}
} else {
warning(paste("Uma das colunas tem apenas uma categoria:", ce_col, "ou", octs6_col))
}
}
}
print(octs6_cols)
print(ce_cols)
contingency_table <- table(data$octs6.SQ002., data$CE04, useNA='no')
mosaic(contingency_table, shade=TRUE, legend = TRUE)
contingency_table
mosaic(contingency_table,
shade=TRUE,
legend = TRUE
xlab = 'oct6.sq002',
help("mosaic")
mosaic(contingency_table,
shade=TRUE,
legend = TRUE)
mosaic(data$octs6.SQ002. ~ data$CE04,
shade=TRUE,
legend = TRUE)
data[c(`octs6.SQ002.`, CE04)]
data[c("octs6.SQ002.", "CE04")]
df <- na.omit(data[c("octs6.SQ002.", "CE04")])
mosaic(df$octs6.SQ002., df$CE04
shade=TRUE,
mosaic(df$octs6.SQ002. ~ df$CE04,
shade=TRUE,
legend = TRUE)
mosaic(df["octs6.SQ002."] ~ df$CE04,
shade=TRUE,
legend = TRUE)
# Criar o gráfico de mosaico
mosaic(~ octs6.SQ002. + CE04,
data = df,  # Especificar o dataframe
shade = TRUE,  # Destacar resíduos
legend = TRUE)  # Exibir legenda
df <- na.omit(data[c("octs6.SQ002.", "CE05")])
# Criar o gráfico de mosaico
mosaic(~ octs6.SQ002. + CE06,
data = df,  # Especificar o dataframe
shade = TRUE,  # Destacar resíduos
legend = TRUE)  # Exibir legenda
# Criar o gráfico de mosaico
mosaic(~ octs6.SQ002. + CE05,
data = df,  # Especificar o dataframe
shade = TRUE,  # Destacar resíduos
legend = TRUE)  # Exibir legenda
df <- na.omit(data[c("octs6.SQ002.", "CE02")])
# Criar o gráfico de mosaico
mosaic(~ octs6.SQ002. + CE02,
data = df,  # Especificar o dataframe
shade = TRUE,  # Destacar resíduos
legend = TRUE)  # Exibir legenda
table <- xtabs(~ octs6.SQ002. + CE02, data = df)
table
# Criar o gráfico de mosaico
mosaic(table,
shade = TRUE,  # Destacar resíduos
labeling = labeling_border(rot_labels = c(0, 0, 0, 55),
abbreviate_labs = c(7, 2),
offset_varnames = c(0, 0, 0, 0.5)))
help(xtabs)
table <- xtabs(~ octs6.SQ002. + CE02, data = data)
# Criar o gráfico de mosaico
mosaic(table,
shade = TRUE,  # Destacar resíduos
labeling = labeling_border(rot_labels = c(0, 0, 0, 55),
abbreviate_labs = c(7, 2),
offset_varnames = c(0, 0, 0, 0.5)))
summary(data)
table <- xtabs(~ octs6.SQ002. + CE02, data = data, na.action = na.omit)
table
levels(data$CE02)
df <- data[c("octs6.SQ002.", "CE02")] %>%
filter_all(all_vars(. != ""))
table <- xtabs(~ octs6.SQ002. + CE02, data = df)
# Criar o gráfico de mosaico
mosaic(table,
shade = TRUE,  # Destacar resíduos
labeling = labeling_border(rot_labels = c(0, 0, 0, 55),
abbreviate_labs = c(7, 2),
offset_varnames = c(0, 0, 0, 0.5)))
# Criar o gráfico de mosaico
mosaic(table,
shade = TRUE,  # Destacar resíduos
labeling = labeling_border(rot_labels = c(0, 0, 0, 55),
#abbreviate_labs = c(7, 2),
offset_varnames = c(0, 0, 0, 0.5)))
# Criar o gráfico de mosaico
mosaic(table,
shade = TRUE,  # Destacar resíduos
labeling = labeling_border(rot_labels = c(0, 0, 0, 55),
abbreviate_labs = c(10, 10),
offset_varnames = c(0, 0, 0, 0.5)))
# Criar o gráfico de mosaico
mosaic(table,
shade = TRUE,  # Destacar resíduos
labeling = labeling_border(rot_labels = c(0, 0, 0, 55),
abbreviate_labs = c(15, 10),
offset_varnames = c(0, 0, 0, 0.5)))
df <- data[c("octs6.SQ003.", "CE06")] %>%
filter_all(all_vars(. != ""))
table <- xtabs(~ octs6.SQ003. + CE06, data = df)
# Criar o gráfico de mosaico
mosaic(table,
shade = TRUE,  # Destacar resíduos
labeling = labeling_border(rot_labels = c(0, 0, 0, 55),
abbreviate_labs = c(15, 10),
offset_varnames = c(0, 0, 0, 0.5)))
df <- data[c("octs6.SQ003.", "CE05")] %>%
filter_all(all_vars(. != ""))
table <- xtabs(~ octs6.SQ003. + CE05, data = df)
# Criar o gráfico de mosaico
mosaic(table,
shade = TRUE,  # Destacar resíduos
labeling = labeling_border(rot_labels = c(0, 0, 0, 55),
abbreviate_labs = c(15, 10),
offset_varnames = c(0, 0, 0, 0.5)))
# Criar o gráfico de mosaico
mosaic(table,
shade = TRUE,  # Destacar resíduos
labeling = labeling_border(rot_labels = c(0, 0, 45, 55),
abbreviate_labs = c(15, 10),
offset_varnames = c(0, 0, 0, 0.5)))
# Criar o gráfico de mosaico
mosaic(table,
shade = TRUE,  # Destacar resíduos
labeling = labeling_border(rot_labels = c(0, 0, 45, 55),
abbreviate_labs = c(15, 10),
offset_varnames = c(0, 0, 0, 0.5)))
# Criar o gráfico de mosaico
mosaic(table,
shade = TRUE,  # Destacar resíduos
labeling = labeling_border(rot_labels = c(0, 45, 0, 45),
abbreviate_labs = c(15, 10),
offset_varnames = c(0, 0, 0, 0.5)))
# Criar o gráfico de mosaico
mosaic(table,
shade = TRUE,  # Destacar resíduos
labeling = labeling_border(rot_labels = c(20, 90, 0, 70),
abbreviate_labs = c(15, 10),
offset_varnames = c(0, 0, 0, 0.5)))
# Criar o gráfico de mosaico
mosaic(table,
shade = TRUE,  # Destacar resíduos
labeling = labeling_border(rot_labels = c(20, 90, 0, 70),
abbreviate_labs = c(15, 15),
offset_varnames = c(0, 0, 0, 0.5)))
help("mosaic")
help("labeling_border")
request(reticulate)
request("reticulate")
install.packages("reticulate")
library(reticulate)
pickle <- import("pickle")
with(py$pickle$open("E:/Dashboard PQ/categories.pckle", "rb") %as% file, {
dicionario <- pickle$load(file)
})
pickle <- import("pickle")
with(py$pickle$open("E:/Dashboard PQ/categories.pckle", "rb") %as% file, {
dicionario <- pickle$load(file)
})
pickle <- import("pickle")
with(py$pickle$open("E:/Dashboard PQ/categories.pckle", "rb") %as% file, {
dicionario <- pickle$load(file)
})
with(py$open("E:/Dashboard PQ/categories.pckle", "rb") %as% file, {
dicionario <- pickle$load(file)
})
clear()
gc()
library(tidyverse)
library(vcd)
library(jsonlite)
data <- read.csv("E:/Dashboard PQ/data_tratado.csv")
dicionario <- fromJSON("E:/Dashboard PQ/categories.json")
dicionario
# Iterar sobre as colunas do dicionário
for (coluna in names(dicionario)) {
# Verificar se a coluna existe no dataframe
if (coluna %in% colnames(data)) {
# Converter a coluna em factor, com níveis na ordem do dicionário
data[[coluna]] <- factor(data[[coluna]], levels = dicionario[[coluna]])
}
}
summary(data)
# Função para gerar gráfico de mosaico
grafico_mosaico <- function(data, var1, var2) {
# Filtrar valores vazios nas duas variáveis
df <- data[c(var1, var2)] %>%
filter_all(all_vars(. != ""))
# Criar a tabela de contingência
table <- xtabs(as.formula(paste("~", var1, "+", var2)), data = df)
# Gerar o gráfico de mosaico
mosaic(table,
shade = TRUE,
labeling = labeling_border(rot_labels = c(20, 90, 0, 70),
abbreviate_labs = c(15, 15),
offset_varnames = c(0, 0, 0, 0.5)))
}
grafico_mosaico(data, "octs6.SQ003.", "CE05")
grafico_mosaico(data, "octs6.SQ003.", "CE07")
grafico_mosaico(data, "CE07", "octs6.SQ003.")
summary(df)
summary(df)
df
# Função para gerar gráfico de mosaico com ordenação de categorias
grafico_mosaico <- function(data, var1, var2, ordem_var1 = NULL, ordem_var2 = NULL,
rot_labels = c(20, 90, 0, 70),
abbreviate_labs = c(15, 15),
offset_varnames = c(0, 0, 0, 0.5)) {
# Filtrar valores vazios nas duas variáveis
df <- data[c(var1, var2)] %>%
filter_all(all_vars(. != ""))
# Ordenar as categorias das variáveis, se a ordem for fornecida
if (!is.null(ordem_var1)) {
df[[var1]] <- factor(df[[var1]], levels = ordem_var1)
}
if (!is.null(ordem_var2)) {
df[[var2]] <- factor(df[[var2]], levels = ordem_var2)
}
# Criar a tabela de contingência
table <- xtabs(as.formula(paste("~", var1, "+", var2)), data = df)
# Gerar o gráfico de mosaico
mosaic(table,
shade = TRUE,
labeling = labeling_border(rot_labels = rot_labels,
abbreviate_labs = abbreviate_labs,
offset_varnames = offset_varnames))
}
grafico_mosaico(data, "CE07", "octs6.SQ003.",
ordem_var1 = dicionario$CE07,
ordem_var2 = dicionario$`octs6[SQ003]`)
variaveis <- fromJSON("E:/Dashboard PQ/varmap.json")
variaveis$`TI01[SQ001]`
variaveis$`odc3[SQ003]`
variaveis[[`odc3[SQ003]`]]
variaveis[`odc3[SQ003]`]
variaveis$`adc1[SQ013]`
variavel
variaveis
names(dicionario) <- gsub("\\[|\\]", ".", names(variaveis))
names(variaveis) <- gsub("\\[|\\]", ".", names(variaveis))
# Função para gerar gráfico de mosaico com ordenação de categorias
grafico_mosaico <- function(data, var1, var2,
rot_labels = c(20, 90, 0, 70),
abbreviate_labs = c(15, 15),
offset_varnames = c(0, 0, 0, 0.5)) {
# Filtrar valores vazios nas duas variáveis
df <- data[c(var1, var2)] %>%
filter_all(all_vars(. != ""))
ordem_var1 = dicionario[var1]
ordem_var2 = dicionario[var2]
# Ordenar as categorias das variáveis, se a ordem for fornecida
if (!is.null(ordem_var1)) {
df[[var1]] <- factor(df[[var1]], levels = ordem_var1)
}
if (!is.null(ordem_var2)) {
df[[var2]] <- factor(df[[var2]], levels = ordem_var2)
}
# Criar a tabela de contingência
table <- xtabs(as.formula(paste("~", var1, "+", var2)), data = df)
nome_var1 <- variaveis[var1]
nome_var2 <- variaveis[var2]
# Gerar o gráfico de mosaico
mosaic(table,
shade = TRUE,
labeling = labeling_border(rot_labels = rot_labels,
abbreviate_labs = abbreviate_labs,
offset_varnames = offset_varnames,
set_varnames = c(nome_var1, nome_var2)
))
}
grafico_mosaico(data, "CE07", "octs6.SQ003.")
help("factor")
dicionario["CE07"]
dicionario["octs6.SQ003."]
variaveis["CE07"]
data$CE07
# Função para gerar gráfico de mosaico com ordenação de categorias
grafico_mosaico <- function(data, var1, var2,
ordem_var1 = NULL,
ordem_var2 = NULL,
rot_labels = c(20, 90, 0, 70),
abbreviate_labs = c(15, 15),
offset_varnames = c(0, 0, 0, 0.5)) {
# Filtrar valores vazios nas duas variáveis
df <- data[c(var1, var2)] %>%
filter_all(all_vars(. != ""))
# Ordenar as categorias das variáveis, se a ordem for fornecida
if (!is.null(ordem_var1)) {
df[[var1]] <- factor(df[[var1]], levels = ordem_var1)
}
if (!is.null(ordem_var2)) {
df[[var2]] <- factor(df[[var2]], levels = ordem_var2)
}
# Criar a tabela de contingência
table <- xtabs(as.formula(paste("~", var1, "+", var2)), data = df)
nome_var1 <- variaveis[var1]
nome_var2 <- variaveis[var2]
# Gerar o gráfico de mosaico
mosaic(table,
shade = TRUE,
labeling = labeling_border(rot_labels = rot_labels,
abbreviate_labs = abbreviate_labs,
offset_varnames = offset_varnames,
set_varnames = c(nome_var1, nome_var2)
))
}
grafico_mosaico(data, "CE07", "octs6.SQ003.",
ordem_var1 = dicionario$CE07,
ordem_var2 = dicionario$"octs6.SQ003.")
